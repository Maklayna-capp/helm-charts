{{ if eq .Values.type "deployment" }}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ include "microfleet.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "microfleet.name" . }}
    helm.sh/chart: {{ include "microfleet.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  {{- if eq .Values.serviceAccountName "" }}
  automountServiceAccountToken: false
  {{- else }}
  serviceAccountName: "{{ .Values.serviceAccountName }}"
  {{- end }}
  replicas: {{ .Values.replicaCount }}
{{- if .Values.updateStrategy }}
  strategy:
{{ toYaml .Values.updateStrategy | indent 4 }}
{{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "microfleet.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "microfleet.name" . }}
        helm.sh/chart: {{ include "microfleet.chart" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
      {{- if eq .Values.serviceAccountName "" }}
      automountServiceAccountToken: false
      {{- else }}
      serviceAccountName: "{{ .Values.serviceAccountName }}"
      {{- end }}
      {{- if .Values.consul.templates }}
      initContainers:
      - name: consul-template
        image: hashicorp/consul-template:alpine
        env:
          - name: NODE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
        volumeMounts:
        - name: consul-template
          mountPath: /template
        - name: config
          mountPath: /config
        command:
          - sh
          - -ec
          - |
            USER_HOST="{{ .Values.consul.host }}"
            CONSUL_HOST=${USER_HOST:-"$NODE_IP"}
            CONSUL_PORT="{{ .Values.consul.port }}"

            consul-template \
            -consul-addr="$CONSUL_HOST:$CONSUL_PORT" \
            -consul-retry-attempts=3 \
            -config=/template/config.hcl \
            {{- range $filename, $content := .Values.consul.templates }}
            -template "/template/{{ $filename }}:/config/{{ $filename }}" \
            {{- end }}
            -log-level={{ .Values.consul.logLevel }} \
            -once
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
        {{- if .Values.env }}
{{ toYaml .Values.env | indent 12 }}
        {{- end }}
          volumeMounts:
          - name: config
            mountPath: {{ .Values.consul.path }}
          
          {{- if .Values.service }}
          ports:
          {{- range $name, $service := .Values.service }}
            - name: {{ $name }}
              containerPort: {{ default $service.targetPort $service.port }}
              protocol: TCP
          {{- end }}
          {{- end }}

          {{- if and .Values.health.path .Values.health.port }}
          livenessProbe:
            httpGet:
              path: {{ .Values.health.path }}
              port: {{ .Values.health.port }}
              initialDelaySeconds: {{ .Values.health.initialDelaySeconds }}
              periodSeconds: {{ .Values.health.periodSeconds }}
              timeoutSeconds: {{ .Values.health.timeoutSeconds }}
              successThreshold: {{ .Values.health.successThreshold }}
              failureThreshold: {{ .Values.health.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.health.path }}
              port: {{ .Values.health.port }}
              periodSeconds: {{ .Values.health.periodSeconds }}
              timeoutSeconds: {{ .Values.health.timeoutSeconds }}
              successThreshold: {{ .Values.health.successThreshold }}
              failureThreshold: {{ .Values.health.failureThreshold }}
          {{- end }}
      {{- if .Values.resources }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
      {{- end }}
      {{- if eq .Values.antiAffinity "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: {{ include "microfleet.name" . }}
                  app.kubernetes.io/instance: {{ .Release.Name }}
      {{- else if eq .Values.antiAffinity "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: {{ include "microfleet.name" . }}
                  app.kubernetes.io/instance: {{ .Release.Name }}
      {{- end }}
      volumes:
      - name: config
        emptyDir: {}
      {{- if .Values.consul.templates }}
      - name: consul-template
        configMap:
          name: {{ include "microfleet.fullname" . }}-consul-templates
      {{- end }}
{{ end }}