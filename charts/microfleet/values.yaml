### rewrite service name with selected one
name: ""

### amount of service instances
replicaCount: 1

### type of deployment: deployment, statefulset
type: deployment

### launch service with specified permissions to access GKE and google API
serviceAccountName: ""

### default update strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

### docker image settings
image:
  repository: nginx
  tag: latest
  pullPolicy: Always

### perform operations before starting main service
initContainers:
  # - name: consul-template
  #   image: hashicorp/consul-template:alpine
  #   env:
  #     - name: NODE_IP
  #       valueFrom:
  #         fieldRef:
  #           fieldPath: status.hostIP
  #   volumeMounts:
  #   - name: consul-template
  #     mountPath: /template
  #   - name: config
  #     mountPath: /config
  #   command:
  #     - sh
  #     - -ec
  #     - |
  #       USER_HOST="{{ .Values.consul.host }}"
  #       CONSUL_HOST=${USER_HOST:-"$NODE_IP"}
  #       CONSUL_PORT="{{ .Values.consul.port }}"

  #       consul-template \
  #       -consul-addr="$CONSUL_HOST:$CONSUL_PORT" \
  #       -consul-retry-attempts=3 \
  #       -config=/template/config.hcl \
  #       {{- range $filename, $content := .Values.consul.templates }}
  #       -template "/template/{{ $filename }}:/config/{{ $filename }}" \
  #       {{- end }}
  #       -log-level={{ .Values.consul.logLevel }} \
  #       -once

  - name: sync
    image: gcr.io/google_containers/git-sync:v3.0.1
    env:
      - name: GIT_SYNC_REPO
        value: https://github.com/StreamLayer/sl-chat-auth.git
      - name: GIT_SYNC_USERNAME
        value: fulldive-devops
      - name: GIT_SYNC_PASSWORD
        value: VD5cQ8kzCrEd4hS76H
      - name: GIT_SYNC_ROOT
        value: /specs
      - name: GIT_SYNC_ONE_TIME
        value: "true"
    volumeMounts:
      - name: volumename
        mountPath: /specs

### volumes accessible to service
volumes:
  - name: config
    emptyDir: {}

### volumes to mount into service directly
volumeMounts:
  - name: volumename
    mountPath: /specs

### env variables for the service
env:
  - name: test
    value: test

### kubernetes service entity (do not confuse with microservice itself)
service:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP

### default certificate settings if cert is required
certificate:
  provider: cloudflare
  issuer:
    kind: ClusterIssuer
    name: letsencrypt

### isto gateway/virtualservice
endpoint: {}
# host: grpc.testing.streamlayer.io
# httpRedirect: true
# createCertificate: true
# ports:
# - name: grpc
#   port: 80
#   targetPort: 50051
#   protocol: http
# - name: grpc-tls
#   port: 443
#   targetPort: 50051
#   protocol: https

### both .path and .port shoud be specified for health check
health:
  path: ""
  port: ""
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

### pod distruption budget
pdb:
  minAvailable: 1

### rules how to spread group of instances between nodes
antiAffinity: soft

resources: {}

### service is able to get settings from consul using `consul-template`
# enabled if `consul.templates` is set
# https://github.com/hashicorp/consul-template
#
# How to debug templates:
# 1) Proxy k8s consul instance to local port:
# `kubectl port-forward service/consul-server 8500:8500`
# 2) Store template to file `chart.yaml`
# 3) Generate config:
# `consul-template -template "chart.yaml:output.txt" -once -dry`
consul:
  # if `consul.host` is not set - will take IP of the node
  # best practice is to launch consul clients on every node
  host: ""
  # default consul port
  port: 8500
  # place where to mount rendered configs
  path: /config
  # additional configuration for `consul-template`
  config: |-
    consul {
    }
  logLevel: debug
  # object with templates
  templates: {}
    # config.yml: |-
    #   amqp:
    #     host: {{ keyOrDefault "staging/amqpHost" "localhost" }}
    #     password: {{ keyOrDefault "staging/amqpPassword" "password" }}
    #   redis:
    #     settings:
    #       host: {{ keyOrDefault "staging/redisHost" "redishost" }}

# https://github.com/istio/istio/pull/7488
redis-ha:
  enabled: false
  nameOverride: redis
  redis:
    masterGroupName: master
  ### quorum requirement: n/2+1
  podDisruptionBudget:
    maxUnavailable: 2
  replicas: 3

  # https://github.com/istio/old_issues_repo/issues/316
  # TODO: switch to istio CNI ?
  # securityContext:
  #   runAsUser: 0
  #   fsGroup: 1000
  #   runAsNonRoot: false
  #   privileged: true