### rewrite service name with selected one
name: ""

### inject istio sidecar
# if disabled - following entities will not be created:
# certificate, statefulset, gateay
meshEnabled: true

### amount of service instances
replicaCount: 1

### launch service with specified permissions to access GKE and google API
serviceAccountName: ""

### default update strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

### docker image settings
image:
  repository: nginx
  tag: latest
  pullPolicy: Always

### perform operations before starting main service
initContainers: []
  # - name: sync
  #   image: gcr.io/google_containers/git-sync:v3.0.1
  #   env:
  #     - name: GIT_SYNC_REPO
  #       value: https://github.com/StreamLayer/sl-chat-auth.git
  #     - name: GIT_SYNC_USERNAME
  #       value: ???
  #     - name: GIT_SYNC_PASSWORD
  #       value: ???
  #     - name: GIT_SYNC_ROOT
  #       value: /repo
  #     - name: GIT_SYNC_ONE_TIME
  #       value: "true"
  #   volumeMounts:
  #     - name: chat-auth
  #       mountPath: /repo

### volumes accessible to service
volumes: []
  # - name: config
  #   emptyDir: {}

### volumes to mount into service directly
volumeMounts: []
  # - name: volumename
  #   mountPath: /specs

### env variables for the service
env: []
  # - name: test
  #   value: test

### ports which service exposes
service:
  type: ClusterIP
  ports: []
    # - name: http
    #   port: 8080
      # targetPort: 8081
      # protocol: TCP

# describes gateway to be created so service able to get traffic from the internet
# if .gateway.host is not set - gateway will not be created
gateway: {}
  # host: www.yandex.ru
  # httpsRedirect: true
  # createCertificate: true
  # ports:
  #   - name: http
  #     port: 80
  #     # targetPort: 8080 # will take firs port from .service.ports by default
  #     # protocol: http # HTTP, HTTPS, MONGO, HTTP2

### default certificate settings if cert is required
certificate:
  provider: cloudflare
  issuer:
    kind: ClusterIssuer
    name: letsencrypt

### healthcheck settings for the service
health: {}
  # path: /health
  # port: http
  # initialDelaySeconds: 5
  # periodSeconds: 5
  # successThreshold: 1
  # failureThreshold: 3


### pod distruption budget
disruptionBudget:
  minAvailable: 1

### rules how to spread group of instances between nodes
affinity: |
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - topologyKey: "kubernetes.io/hostname"
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: {{ include "microfleet.name" . }}
            app.kubernetes.io/instance: {{ .Release.Name }}

### amount of resources service will request or be able to consume
resources: {}

### service is able to get settings from consul using `consul-template`
# enabled if `consul.templates` is set
# https://github.com/hashicorp/consul-template
#
# How to debug templates:
# 1) Proxy k8s consul instance to local port:
# `kubectl port-forward service/consul-server 8500:8500`
# 2) Store template to file `chart.yaml`
# 3) Generate config:
# `consul-template -template "chart.yaml:output.txt" -once -dry`
consul:
  # place where to mount rendered configs
  path: /config
  # additional configuration for `consul-template`
  # object with templates
  templates: {}
    # config.yml: |-
    #   amqp:
    #     host: {{ keyOrDefault "staging/amqpHost" "localhost" }}
    #     password: {{ keyOrDefault "staging/amqpPassword" "password" }}
    #   redis:
    #     settings:
    #       host: {{ keyOrDefault "staging/redisHost" "redishost" }}

# https://github.com/istio/istio/pull/7488
redis-ha:
  enabled: false
  nameOverride: redis
  redis:
    masterGroupName: master
  ### quorum requirement: n/2+1
  podDisruptionBudget:
    maxUnavailable: 2
  replicas: 3
