### TODO:
# - http/grpc/whatever services in one map
# - env variables from array to map
# - prometheus metrics/alerts


### overvite instances name using custom one
fullnameOverride: ""

### amout of service replicas
replicaCount: 2

### if empty - no service token will be mounted into pods
### othervise will mount token for specified service account
serviceAccountName: ""

### service docker image
image:
  repository: ""
  tag: latest
  pullPolicy: IfNotPresent

### health checks using http routes
# enabled if `health.path` is set
health:
  path: ""
  port: http
  initialDelaySeconds: 5

### http transport settings
# enabled if `http.service.port` is set
http:
  service:
    # ability to rewrite default service name
    nameOverride: ""
    type: ClusterIP
    port: "" # 3000
  ingress:
    # do not create ingress if host is empty
    host: ""
    path: /
    # create tls certificate for specified ingress
    createTls: true
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"

### grpc transport settings (same as for .http)
grpc:
  service:
    nameOverride: ""
    type: ClusterIP
    port: "" # 4000
  ingress:
    host: ""
    path: /
    createTls: true
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"

### amount of resources allowed for the service
resources: {}
  # requests:
  #   memory: 200Mi
  #   cpu: 100m
  # limits:
  #   memory: 700Mi

### 
nodeSelector: {}
tolerations: []
antiAffinity: "soft"

### jobs to launch with service
# https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/
# https://en.wikipedia.org/wiki/Cron
jobs: {}
  # test:
  #   image: ""
  #   resources: {}
  #   command: []
  #   args: []
  #   env: []

### prometheus operator entities
metrics:
  # generate ServiceMonitor CRD
  enabled: false
  # namespace for metrics
  namespace: monitoring
  # servicemonitor labels selector
  labels:
    prometheus: prometheus
  # if set - expects to be secret with corresponding name created
  # in namespace .monitoring.namespace
  authSecret: ""

# default values for the cronjob
jobDefaults:
  serviceAccountName: ""
  # cronjob specific
  schedule: "@daily"
  suspend: false
  concurrencyPolicy: Forbid # Allow, Forbid, Replace
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 1
  # job template specific
  backoffLimit: 0 # amount of retries before consider job failed
  # amount of seconds before killing the job (1 day by default)
  activeDeadlineSeconds: 86400
  restartPolicy: Never
  imagePullPolicy: IfNotPresent
  completions: 1
  parallelism: 1

### tune availability of the service by setting distruption budgets
# https://kubernetes.io/docs/tasks/run-application/configure-pdb/
podDisruptionBudget: {}
  # maxUnavailable: 1
  # minAvailable: 1

### env variables to inject into pods
env: {}
  # - name: NCONF_FILE_PATH
  #   value: /config

### service is able to get settings from consul using `consul-template`
# enabled if `consul.templates` is set
# https://github.com/hashicorp/consul-template
#
# How to debug templates:
# 1) Proxy k8s consul instance to local port:
# `kubectl port-forward service/consul-ui 8500:80`
# 2) Store template to file `in.tpl`
# 3) Generate config:
# `consul-template -template "in.tpl:out.txt" -log-level debug -once`
# 4) Ensure config is generated:
# `cat out.txt`
consul:
  # if `consul.host` is not set - will take IP of the node
  # it is a best practice to launch consul clients on every node
  host: ""
  # default consul port
  port: 8500
  # place where to mount rendered configs
  path: /config
  # additional configuration for `consul-template`
  config: |-
    consul {
    }
  # do not watch for consul values (generate config once before service starts)
  # once: true
  # execute command on config reload
  # onReload: "echo Config is rendered"
  logLevel: debug
  # object with templates
  templates: {}
    # config.yml: |-
    #   amqp:
    #     host: {{ keyOrDefault "staging/amqpHost" "localhost" }}
    #     password: {{ keyOrDefault "staging/amqpPassword" "password" }}
    #   redis:
    #     settings:
    #       host: {{ keyOrDefault "staging/redisHost" "redishost" }}